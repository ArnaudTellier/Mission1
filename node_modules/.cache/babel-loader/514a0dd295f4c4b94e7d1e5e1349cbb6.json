{"ast":null,"code":"import axiosInstance from \"../config/axios\";\nimport jwtDecode from \"jwt-decode\";\n\nconst register = (username, password, firstname, lastname) => {\n  return axiosInstance.post(\"/register\", {\n    \"username\": username,\n    \"password\": password,\n    \"firstname\": firstname,\n    \"lastname\": lastname\n  });\n};\n\nconst logIn = (username, password) => {\n  return axiosInstance.post(\"/login\", {\n    username: 'username',\n    password: 'password'\n  }).then(response => response.data.token) // sinon on renvoie une erreur\n  .catch(error => {\n    throw new Error(error);\n  });\n};\n\nconst logOut = () => {\n  localStorage.removeItem(\"token\");\n};\n\nconst isAuthenticated = () => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    const payload = jwtDecode(token);\n    return payload.exp * 1000 > new Date().getTime();\n  }\n\n  return false;\n};\n\nconst getPayload = () => {\n  return jwtDecode(localStorage.getItem(\"token\"));\n};\n\nexport default {\n  logIn,\n  logOut,\n  isAuthenticated,\n  register\n};","map":{"version":3,"sources":["C:/Users/arnau/Documents/Projets/afterwork/src/services/AuthAPI.js"],"names":["axiosInstance","jwtDecode","register","username","password","firstname","lastname","post","logIn","then","response","data","token","catch","error","Error","logOut","localStorage","removeItem","isAuthenticated","getItem","payload","exp","Date","getTime","getPayload"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAUC,QAAV,EAAmBC,SAAnB,EAA6BC,QAA7B,KAA0C;AACvD,SAAON,aAAa,CACfO,IADE,CACG,WADH,EACgB;AAAC,gBAAWJ,QAAZ;AAAqB,gBAAWC,QAAhC;AAAyC,iBAAYC,SAArD;AAA+D,gBAAWC;AAA1E,GADhB,CAAP;AAEH,CAHD;;AAKA,MAAME,KAAK,GAAG,CAACL,QAAD,EAAUC,QAAV,KAAuB;AACjC,SAAOJ,aAAa,CACfO,IADE,CACG,QADH,EACY;AACXJ,IAAAA,QAAQ,EAAE,UADC;AAEXC,IAAAA,QAAQ,EAAE;AAFC,GADZ,EAKFK,IALE,CAKGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,KAL7B,EAMH;AANG,GAOFC,KAPE,CAOIC,KAAK,IAAI;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH,GATE,CAAP;AAUH,CAXD;;AAaA,MAAME,MAAM,GAAG,MAAM;AACjBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACH,CAFD;;AAKA,MAAMC,eAAe,GAAG,MAAM;AAC1B,QAAMP,KAAK,GAAGK,YAAY,CAACG,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIR,KAAJ,EAAW;AACP,UAAMS,OAAO,GAAGpB,SAAS,CAACW,KAAD,CAAzB;AACA,WAAOS,OAAO,CAACC,GAAR,GAAc,IAAd,GAAqB,IAAIC,IAAJ,GAAWC,OAAX,EAA5B;AACH;;AACD,SAAO,KAAP;AACH,CAPD;;AASA,MAAMC,UAAU,GAAG,MAAM;AACrB,SAAOxB,SAAS,CAACgB,YAAY,CAACG,OAAb,CAAqB,OAArB,CAAD,CAAhB;AACH,CAFD;;AAMA,eAAe;AAAEZ,EAAAA,KAAF;AAASQ,EAAAA,MAAT;AAAiBG,EAAAA,eAAjB;AAAkCjB,EAAAA;AAAlC,CAAf","sourcesContent":["import axiosInstance from \"../config/axios\";\r\nimport jwtDecode from \"jwt-decode\"\r\n\r\nconst register = (username,password,firstname,lastname) => {\r\n    return axiosInstance\r\n        .post(\"/register\", {\"username\":username,\"password\":password,\"firstname\":firstname,\"lastname\":lastname})\r\n}\r\n\r\nconst logIn = (username,password) => {\r\n    return axiosInstance\r\n        .post(\"/login\",{\r\n            username: 'username',\r\n            password: 'password'\r\n        })\r\n        .then(response => response.data.token)\r\n        // sinon on renvoie une erreur\r\n        .catch(error => {\r\n            throw new Error(error)\r\n        })        \r\n}\r\n\r\nconst logOut = () => {\r\n    localStorage.removeItem(\"token\");\r\n}\r\n\r\n\r\nconst isAuthenticated = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n        const payload = jwtDecode(token);\r\n        return payload.exp * 1000 > new Date().getTime();\r\n    }\r\n    return false;\r\n}\r\n\r\nconst getPayload = () => {\r\n    return jwtDecode(localStorage.getItem(\"token\"))\r\n}\r\n\r\n\r\n\r\nexport default { logIn, logOut, isAuthenticated, register };"]},"metadata":{},"sourceType":"module"}